#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "nvs_flash.h"
#include "esp_log.h"
#include "driver/gpio.h"
#include "esp_event.h"

#include "app_wiegand.h"
#include "app_zigbee.h"
#include "app_http.h"
#include "app_web.h"
#include "nvs_storage.h"
#include "rfid_reader.h"

#include "esp_zigbee_core.h"   // <-- declara esp_zb_main_loop_iteration()


static const char *TAG = "MAIN";

void app_main(void)
{
	// ... inicialização de Wi-Fi, RFID, Zigbee, etc.
  //  app_web_start();  // Inicia o servidor web
    
    ESP_ERROR_CHECK(nvs_storage_init());
    rfid_reader_init();

    // Inicia WiFi (aqui você conecta com config salva, se quiser)
    // wifi_start_from_nvs();

    // Inicia WebServer
    start_webserver();
    
    // ---- Инициализация NVS ----
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
        ESP_ERROR_CHECK(nvs_flash_erase());
        ESP_ERROR_CHECK(nvs_flash_init());
    }

    // ---- Инициализация обработчика прерываний GPIO ----
    ESP_ERROR_CHECK(gpio_install_isr_service(0));

    // ---- Пины по умолчанию (настройте под вашу плату) ----
    wiegand_pins_t pins = {
        .gpio_d0 = 4,
        .gpio_d1 = 5,
        .gpio_led = 14,
        .gpio_buzzer = 13,
        .gpio_relay = 16,
    };
    ESP_ERROR_CHECK(wiegand_init(&pins));

    // ---- Запуск Zigbee ----
    app_zb_init_start();

    // ---- Запуск Web UI (SoftAP + HTTP) ----
    app_http_start();

    ESP_LOGI(TAG, "System initialized");

    // ---- Главный цикл Zigbee ----
    while (true) {
        // Zigbee стек требует регулярных итераций в процессе (см. SDK)
        esp_zb_main_loop_iteration();
        vTaskDelay(pdMS_TO_TICKS(10));
    }
}
